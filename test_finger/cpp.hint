#define _Function_t(ReturnType,...) std::function<ReturnType(__VA_ARGS__)>
#define _Function(ReturnType,...) [&](__VA_ARGS__)->ReturnType

#define ThreadFunction_t _Function_t(void,void)
#define ThreadFunction [&]()

//___SCN===Structure Class Name,快速拼凑类名的辅助宏
#define ___SCN(Protocol,Message) \
CmdCode##Protocol##_##Message##_Listener

//__SCC===Structure Command Code,快速拼凑命令的宏
#define __SCC(Protocol,Message) \
CmdCode##Protocol##_##Message

//__DLC===Define Listener Class,快速定义监听器类的宏
#define __DLC(Protocol,Message) \
class ___SCN(Protocol,Message):public ICommListener{\
public:\
    void listen(DataPacket response);\
}

//__BCL===Binding Command into Listener,快速把命令绑到监听器的宏
#define __BCL(Protocol,Message) \
attach(__SCC(Protocol,Message),new ___SCN(Protocol,Message)())

//__ILC===Implement Listener Class,快速实现监听器类的宏
#define __ILC(Protocol,Message) \
void ___SCN(Protocol,Message)::listen(DataPacket response)

//SII===Software Inner Instruction,软件内部指令
#define SII(Name) \
SII_##Name##_ForNotOverLapped

//返回true代表可以继续执行下一个流程,false就是执行之后中断
#define FlowFunction_t _Function_t(bool,int)
#define __FlowFunction(arg) _Function(bool,arg)
//返回true代表可以继续执行下一个流程,false就是执行之后中断,id指明该流程的ID
#define FlowFunction(id) __FlowFunction

#define foreach(it,container) for(auto it=container.begin();it!=container.end();it++)

#define FastDefineLogName(FuncName,LogLevel)    \
void MyLog::FuncName(MyString info){            \
    print(LogLevel,info);                       \
}                                               \
void MyLog::FuncName(const char * format,...){  \
    char tmp[512];                              \
    va_list ap;                                 \
    va_start(ap,format);                        \
    vsprintf(tmp,format,ap);                    \
    va_end(ap);                                 \
                                                \
    print(LogLevel,tmp);                        \
}